<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chl&#39;blog</title>
  
  <subtitle>welcome</subtitle>
  <link href="https://chl-git.github.io/atom.xml" rel="self"/>
  
  <link href="https://chl-git.github.io/"/>
  <updated>2021-09-16T15:17:11.531Z</updated>
  <id>https://chl-git.github.io/</id>
  
  <author>
    <name>chl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>04_寻找两个正序数组的中位数</title>
    <link href="https://chl-git.github.io/posts/639f29fb/"/>
    <id>https://chl-git.github.io/posts/639f29fb/</id>
    <published>2021-09-16T13:39:01.000Z</published>
    <updated>2021-09-16T15:17:11.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p></blockquote><blockquote><p>英文版：Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.The overall run time complexity should be O(log (m+n))</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays">https://leetcode-cn.com/problems/median-of-two-sorted-arrays</a></p><p>方法一：二分查找<br>给定两个有序数组，要求找到两个有序数组的中位数，最直观的思路有以下两种：</p><p>使用归并的方式，合并两个有序数组，得到一个大的有序数组。大的有序数组的中间位置的元素，即为中位数。</p><p>不需要合并两个有序数组，只要找到中位数的位置即可。由于两个数组的长度已知，因此中位数对应的两个数组的下标之和也是已知的。维护两个指针，初始时分别指向两个数组的下标 00 的位置，每次将指向较小值的指针后移一位（如果一个指针已经到达数组末尾，则只需要移动另一个数组的指针），直到到达中位数的位置。</p><p>假设两个有序数组的长度分别为 mm 和 nn，上述两种思路的复杂度如何？</p><p>第一种思路的时间复杂度是 O(m+n)O(m+n)，空间复杂度是 O(m+n)O(m+n)。第二种思路虽然可以将空间复杂度降到 O(1)O(1)，但是时间复杂度仍是 O(m+n)O(m+n)。</p><p>如何把时间复杂度降低到 O(\log(m+n))O(log(m+n)) 呢？如果对时间复杂度的要求有 \loglog，通常都需要用到二分查找，这道题也可以通过二分查找实现。</p><p>根据中位数的定义，当 m+nm+n 是奇数时，中位数是两个有序数组中的第 (m+n)/2(m+n)/2 个元素，当 m+nm+n 是偶数时，中位数是两个有序数组中的第 (m+n)/2(m+n)/2 个元素和第 (m+n)/2+1(m+n)/2+1 个元素的平均值。因此，这道题可以转化成寻找两个有序数组中的第 kk 小的数，其中 kk 为 (m+n)/2(m+n)/2 或 (m+n)/2+1(m+n)/2+1。</p><p>假设两个有序数组分别是 \text{A}A 和 \text{B}B。要找到第 kk 个元素，我们可以比较 \text{A}[k/2-1]A[k/2−1] 和 \text{B}[k/2-1]B[k/2−1]，其中 // 表示整数除法。由于 \text{A}[k/2-1]A[k/2−1] 和 \text{B}[k/2-1]B[k/2−1] 的前面分别有 \text{A}[0,..,k/2-2]A[0..k/2−2] 和 \text{B}[0,..,k/2-2]B[0..k/2−2]，即 k/2-1k/2−1 个元素，对于 \text{A}[k/2-1]A[k/2−1] 和 \text{B}[k/2-1]B[k/2−1] 中的较小值，最多只会有 (k/2-1)+(k/2-1) \leq k-2(k/2−1)+(k/2−1)≤k−2 个元素比它小，那么它就不能是第 kk 小的数了。</p><p>因此我们可以归纳出三种情况：</p><p>如果 \text{A}[k/2-1] &lt; \text{B}[k/2-1]A[k/2−1]&lt;B[k/2−1]，则比 \text{A}[k/2-1]A[k/2−1] 小的数最多只有 \text{A}A 的前 k/2-1k/2−1 个数和 \text{B}B 的前 k/2-1k/2−1 个数，即比 \text{A}[k/2-1]A[k/2−1] 小的数最多只有 k-2k−2 个，因此 \text{A}[k/2-1]A[k/2−1] 不可能是第 kk 个数，\text{A}[0]A[0] 到 \text{A}[k/2-1]A[k/2−1] 也都不可能是第 kk 个数，可以全部排除。</p><p>如果 \text{A}[k/2-1] &gt; \text{B}[k/2-1]A[k/2−1]&gt;B[k/2−1]，则可以排除 \text{B}[0]B[0] 到 \text{B}[k/2-1]B[k/2−1]。</p><p>如果 \text{A}[k/2-1] = \text{B}[k/2-1]A[k/2−1]=B[k/2−1]，则可以归入第一种情况处理。</p><p>转载：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回</summary>
      
    
    
    
    <category term="算法" scheme="https://chl-git.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="https://chl-git.github.io/tags/python/"/>
    
    <category term="算法" scheme="https://chl-git.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://chl-git.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="https://chl-git.github.io/posts/310047be/"/>
    <id>https://chl-git.github.io/posts/310047be/</id>
    <published>2021-06-15T12:47:45.000Z</published>
    <updated>2021-09-16T15:22:16.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&#123;</span>% blockquote Seth Godin http<span class="token punctuation">:</span>//sethgodin.typepad.com/seths_blog/2009/07/welcome<span class="token punctuation">-</span>to<span class="token punctuation">-</span>island<span class="token punctuation">-</span>marketing.html Welcome to Island Marketing %<span class="token punctuation">&#125;</span>Every interaction is both precious and an opportunity to delight.<span class="token punctuation">&#123;</span>% endblockquote %<span class="token punctuation">&#125;</span><span class="token punctuation">></span> Every interaction is both precious and an opportunity to delight.<span class="token important">**Seth</span> Godin<span class="token important">**</span> — <span class="token punctuation">[</span><span class="token important">*Welcome</span> to Island Marketing*<span class="token punctuation">]</span>(http<span class="token punctuation">:</span>//sethgodin.typepad.com/seths_blog/2009/07/welcome<span class="token punctuation">-</span>to<span class="token punctuation">-</span>island<span class="token punctuation">-</span>marketing.html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin <http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html> Welcome to Island Marketing</strong></footer></blockquote><blockquote><p>Every interaction is both precious and an opportunity to delight.<br><strong>Seth Godin</strong> — <a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html"><em>Welcome to Island Marketing</em></a></p></blockquote><h2 id="插入YouTube视频（是可以直接播放的）"><a href="#插入YouTube视频（是可以直接播放的）" class="headerlink" title="插入YouTube视频（是可以直接播放的）"></a>插入YouTube视频（是可以直接播放的）</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&#123;</span>% youtube lJIrF4YjHfQ %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><div class="video-container"><iframe src="https://www.youtube.com/embed/videoseries?list=PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="隐私模式"><a href="#隐私模式" class="headerlink" title="隐私模式"></a>隐私模式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&#123;</span>% youtube lJIrF4YjHfQ false %<span class="token punctuation">&#125;</span> <span class="token comment"># 添加false参数</span><span class="token punctuation">&#123;</span>% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' false %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="插入Vimeo视频"><a href="#插入Vimeo视频" class="headerlink" title="插入Vimeo视频"></a>插入Vimeo视频</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&#123;</span>% vimeo video_id %<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="引用其他文章"><a href="#引用其他文章" class="headerlink" title="引用其他文章"></a>引用其他文章</h2><p><code>&#123;% post_link filename [title] [escape] %&#125;</code><br><code>[]()</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&#123;</span>% post_link Corda<span class="token punctuation">-</span>API<span class="token punctuation">-</span>Flows %<span class="token punctuation">&#125;</span> <span class="token comment"># 找的是绝对路径</span><span class="token punctuation">&#123;</span>% post_link Corda<span class="token punctuation">-</span>API<span class="token punctuation">-</span>Flows 别名 %<span class="token punctuation">&#125;</span><span class="token punctuation">[</span>Corda<span class="token punctuation">-</span>API<span class="token punctuation">-</span>Flows<span class="token punctuation">]</span>(aa15b6d6.html)<span class="token punctuation">[</span>别名<span class="token punctuation">]</span>(Corda<span class="token punctuation">-</span>API<span class="token punctuation">-</span>Flows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><a href="/posts/aa15b6d6/" title="Corda-API-Flows">Corda-API-Flows</a><a href="/posts/aa15b6d6/" title="别名">别名</a>  <p><a href="aa15b6d6.html">Corda-API-Flows</a><br><a href="Corda-API-Flows">别名</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-yaml&quot; data-language=&quot;yaml&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="hexo" scheme="https://chl-git.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://chl-git.github.io/tags/hexo/"/>
    
    <category term="markdown" scheme="https://chl-git.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>javaSE</title>
    <link href="https://chl-git.github.io/posts/2c9e36bd/"/>
    <id>https://chl-git.github.io/posts/2c9e36bd/</id>
    <published>2021-06-15T10:52:31.000Z</published>
    <updated>2021-09-16T15:22:46.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ul><li>所有变量、方法、类名：见名知意</li><li>类成员变量、局部变量、方法名：首字母小写加驼峰规则</li><li>常量：大写字母和下划线</li><li>类名：首字母大写加驼峰规则</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 八进制</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>  <span class="token comment">// a1=8</span><span class="token comment">// 十六进制</span><span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">//a2 = 16</span><span class="token comment">// 二进制</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span> <span class="token comment">//a3 = 2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10_000_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>important：<em><strong>不要使用浮点数进行比较，有误差</strong></em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断。 ？？？</span><span class="token keyword">float</span> i1 <span class="token operator">=</span> <span class="token number">.1f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">float</span> i1 <span class="token operator">=</span> <span class="token number">465464564654564645f</span><span class="token punctuation">;</span><span class="token keyword">float</span> i2 <span class="token operator">=</span> i1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token operator">==</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'m'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强制转换 109(unicode编码)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20013</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'\u0109'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a   u0000-uFFFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 溢出</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换b，结果变成long。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ******转换的是a，结果是long。不会溢出</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是对（a*b）转换，溢出</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>b<span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或者b/(double)c 结果才是 0.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>没有初始化的时候会设置为默认值；</p><ul><li>byte、int、short、long:  <code>0</code></li><li>char: <code>&#39;\u0000&#39;</code>对应的字符</li><li>float、double: <code>0.0</code></li><li>boolean: <code>false</code></li><li>其他非基本数据类型会设为<code>null</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// null</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>使用<code>final</code>关键词修饰的变量一经初始化就不能更改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static 用于类成员变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> function<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量命名规则&quot;&gt;&lt;a href=&quot;#变量命名规则&quot; class=&quot;headerlink&quot; title=&quot;变量命名规则&quot;&gt;&lt;/a&gt;变量命名规则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有变量、方法、类名：见名知意&lt;/li&gt;
&lt;li&gt;类成员变量、局部变量、方法名：首字母小写加驼峰</summary>
      
    
    
    
    <category term="java" scheme="https://chl-git.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://chl-git.github.io/tags/java/"/>
    
    <category term="javaSE" scheme="https://chl-git.github.io/tags/javaSE/"/>
    
  </entry>
  
  <entry>
    <title>Gradle-learning</title>
    <link href="https://chl-git.github.io/posts/c1808150/"/>
    <id>https://chl-git.github.io/posts/c1808150/</id>
    <published>2021-05-12T13:44:40.000Z</published>
    <updated>2021-06-15T14:18:16.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文件解释"><a href="#配置文件解释" class="headerlink" title="配置文件解释"></a>配置文件解释</h2><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>对当前项目做局部配置</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">plugins &#123; &#x2F;&#x2F; 项目中声明了哪些插件    id &#39;java&#39; &#x2F;&#x2F; id 表示项目中要使用哪个插件，调用所有的java相关插件    &#x2F;&#x2F; id &#39;kotlin&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>项目组织以及版本号</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F; 项目名称在settings.gradlegroup &#39;org.example&#39;  &#x2F;&#x2F; 组织名version &#39;1.0-SNAPSHOT&#39; &#x2F;&#x2F; 版本号 &quot;SNAPSHOT&quot;表示快照版本，&quot;RELEASED&quot;表示稳定版<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">repositories &#123; &#x2F;&#x2F; 下载的文件放置在.gradle文件下    mavenCentral()  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>依赖管理,可以在maven中心仓库查看依赖怎么写。格式为<code>scope group:name:version</code></p><p><code>testRuntimeOnly</code>称为Scope</p><ul><li>complie 表示编译、运行可用，打包时也会加入</li><li>testRuntimeOnly 表示运行测试时可用</li><li>providedCompile 仅在当前环境可用</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;    testImplementation &#39;org.junit.jupiter:junit-jupiter-api:5.7.0&#39;     testRuntimeOnly &#39;org.junit.jupiter:junit-jupiter-engine:5.7.0&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">test &#123;    useJUnitPlatform()&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h3><p>全局配置</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">rootProject.name &#x3D; &#39;gradleDemo&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置文件解释&quot;&gt;&lt;a href=&quot;#配置文件解释&quot; class=&quot;headerlink&quot; title=&quot;配置文件解释&quot;&gt;&lt;/a&gt;配置文件解释&lt;/h2&gt;&lt;h3 id=&quot;build-gradle&quot;&gt;&lt;a href=&quot;#build-gradle&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Gradle" scheme="https://chl-git.github.io/categories/Gradle/"/>
    
    
    <category term="gradle" scheme="https://chl-git.github.io/tags/gradle/"/>
    
    <category term="依赖管理" scheme="https://chl-git.github.io/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Groovy语言学习</title>
    <link href="https://chl-git.github.io/posts/e90fdfca/"/>
    <id>https://chl-git.github.io/posts/e90fdfca/</id>
    <published>2021-05-12T12:31:12.000Z</published>
    <updated>2021-06-15T14:18:19.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="print-println-printf"><a href="#print-println-printf" class="headerlink" title="print,println,printf"></a>print,println,printf</h3><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//打印</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可以不加括号</span>println <span class="token string gstring">"hello"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//强类型</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">//弱类型。会根据赋值自动解析数据类型</span><span class="token keyword">def</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//class java.lang.Integer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//定义方法</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">def</span> a<span class="token punctuation">,</span><span class="token keyword">def</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// 11</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string gstring">"5"</span><span class="token punctuation">,</span><span class="token string gstring">"6"</span><span class="token punctuation">)</span><span class="token comment">// '56'</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string gstring">"5"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">//'56'</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">def</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> b <span class="token operator">=</span> a<span class="token operator">?</span> <span class="token string">'true'</span><span class="token punctuation">:</span><span class="token string">'false'</span>    <span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token string gstring">""</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token string gstring">"10"</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list和map"><a href="#list和map" class="headerlink" title="list和map"></a>list和map</h3><p>定义map使用的是<code>[]</code>不是<code>&#123;&#125;</code></p><p>使用<code>for(i in map)</code>这里的i是<code>key:value</code></p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//列表的定义</span><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string gstring">"1"</span><span class="token punctuation">,</span><span class="token string gstring">"2"</span><span class="token punctuation">]</span><span class="token comment">//遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// 1 2</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//list[i] 取值</span><span class="token punctuation">&#125;</span> <span class="token comment">// 1 2</span><span class="token comment">//定义map集合</span><span class="token keyword">def</span> map  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string gstring">"Chinese"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string gstring">"Math"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">//["Chinese":50,"Math":25]</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [Chinese, Math]</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [50,25]</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>Chinese<span class="token punctuation">)</span>  <span class="token comment">// 50</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string gstring">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//50</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">//Chinese=50     Math=25</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>需要使用<code>Closure</code>类，但是不用导入（import）</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// 没有参数的闭包</span><span class="token keyword">def</span> co1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string gstring">"hello "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> co2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string gstring">"world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">testCo</span><span class="token punctuation">(</span>Closure closure1<span class="token punctuation">,</span>Closure closure2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">closure1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closure2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">testCo</span><span class="token punctuation">(</span>co1<span class="token punctuation">,</span>co2<span class="token punctuation">)</span> <span class="token comment">// hello world</span><span class="token comment">// 有参数的闭包</span><span class="token keyword">def</span> closure <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    String v<span class="token operator">-></span> <span class="token comment">// 参数类型可以不指定，直接写个 v</span>        <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string gstring">","</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">def</span> <span class="token function">testCo</span><span class="token punctuation">(</span>Closure closure<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">closure</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">testCo</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span> <span class="token comment">// 5</span><span class="token comment">// h,e,l,l,o,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;h3 id=&quot;print-println-printf&quot;&gt;&lt;a href=&quot;#print-println-printf&quot; cla</summary>
      
    
    
    
    <category term="Groovy" scheme="https://chl-git.github.io/categories/Groovy/"/>
    
    
    <category term="Groovy" scheme="https://chl-git.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>Corda（5）——Accounts</title>
    <link href="https://chl-git.github.io/posts/4327cc6a/"/>
    <id>https://chl-git.github.io/posts/4327cc6a/</id>
    <published>2021-05-01T16:32:16.000Z</published>
    <updated>2021-06-15T14:34:39.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这一部分后面补上"><a href="#这一部分后面补上" class="headerlink" title="这一部分后面补上"></a>这一部分后面补上</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这一部分后面补上&quot;&gt;&lt;a href=&quot;#这一部分后面补上&quot; class=&quot;headerlink&quot; title=&quot;这一部分后面补上&quot;&gt;&lt;/a&gt;这一部分后面补上&lt;/h2&gt;</summary>
      
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="Accouts" scheme="https://chl-git.github.io/tags/Accouts/"/>
    
  </entry>
  
  <entry>
    <title>Corda记录</title>
    <link href="https://chl-git.github.io/posts/f5a1c04b/"/>
    <id>https://chl-git.github.io/posts/f5a1c04b/</id>
    <published>2021-04-18T09:01:41.000Z</published>
    <updated>2021-06-15T14:19:13.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UTXO模型"><a href="#UTXO模型" class="headerlink" title="UTXO模型"></a>UTXO模型</h2><h2 id="考虑的问题"><a href="#考虑的问题" class="headerlink" title="考虑的问题"></a>考虑的问题</h2><ul><li>怎么满足的用户的隐私要求</li><li>不同机构之间的数据怎进行联邦学习</li><li>监管怎么考虑：这个只是对于监管提供了部分数据的接口</li><li>使用Corda的优缺点：<ul><li>need-to-know</li><li>交易记录不公开，只需要记录自己参与的，保障隐私的同时，进一步减少需要存储的交易数量。</li></ul></li><li>为什么银行会有你的交易记录？？？<ul><li>如果没有怎么监管，或者说你监管的是什么。</li><li>只是监管账号的发行？</li><li>银行为什么给你发货币。</li></ul></li></ul><h2 id="Corda智能合约"><a href="#Corda智能合约" class="headerlink" title="Corda智能合约"></a>Corda智能合约</h2><p>定义：一组数据以及一个参与方被允许对这些数据执行的操作组成。（states and contracts）</p><p>合约定义了什么可以做而不是什么不可以做。除了里面定义的不能做的事，其他都可以做。所以在设计时就需要考虑足够的参与方交易行为的约束。</p><p>节点需要对state本身进行检验，以保证交易合法</p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p>对于同一个节点的账户，要执行转账操作（<code>MoveFungibleTokenFlow</code>），这个flow只能在保存该账户资产的节点上进行调用，因为这个flow没有识别身份的参数，在使用过程中会默认把执行流操作的节点作为该账户资产的拥有者，然后在本地查找需要转出的资金的账户信息，这将导致错误。</p><p>流执行是要求可以进行断点记录的，就是交易对方（counterParty）或者是公证人如果没有上线，收集签名的时候需要等待对方上线执行，主要是用在不同节点的交易记录。</p><h2 id="交易限制"><a href="#交易限制" class="headerlink" title="交易限制"></a>交易限制</h2><p>基本的匿名账户的限额问题，</p><blockquote><p>限制<strong>单次</strong>转出的金额。</p></blockquote><p>这个可以在合约里面进行验证，匿名账户和完成身份信息认证的账户有自己身份标识</p><blockquote><p>限制转入转出次数，</p></blockquote><p>银行作为托管账户，是可以知道交易双方的基本信息的，（因为需根据匿名性的需要，我们可以在每次交易时都生成一个publickey，因为账户在网络层面是不可见的，一方收到签名只会以为是对方节点<code>Node</code>换了个key进行签名）</p><p>但是对于交易的金额是不能够知道的，这一部分具体实现是怎么做到的，需要考虑一下。</p><p>我可以在数据库中实时更新账户的转入转出次数，当达到限定次数之后。</p><p>解决方案：<br>场景1：一个人注册多个匿名账号的数据信息</p><p>银行不应该有以下数据信息：</p><ul><li>不同账户数据之间的关联信息</li><li>交易详细的数据记录，场景中主要是交易的金额。<br>这里有一个问题是为什么会记录用户账户的记录，可不可以直接对整个交易内容全部进行加密进行加密。<br>个人如果对全部的信息进行加密，那么在进行账户交易次数的验证的时候，银行本身进行数据的查询是没有可行性的。</li></ul><h2 id="后面研究方向"><a href="#后面研究方向" class="headerlink" title="后面研究方向"></a>后面研究方向</h2><p>私钥管理，托管账户的节点会保存所有账户每次申请的私钥，后面处理第三方数据</p><p>联邦学习实现不同机构间的数据进行建模，消除第三方机构。</p><p>系统监管或者说验证的时间间隔，也就是每天进行记录的检验还是其他的给定的数据验证的间隔时间。</p><p>多银行之间的数据如何进行有效的校对、验证和监管。据悉，现今意大利各地银行都在使用R3的Corda区块链用以加快对交易记录的双重检查。意大利银行协会负责人表示，银行间对账流程与数据交换基础技术都必须改变。在旧的银行系统中需要花费30至50天的对账，在Corda上一天之内就能完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Buyer Query for token balance.</span><span class="token class-name">QueryCriteria</span> queryCriteria <span class="token operator">=</span> <span class="token class-name">QueryUtilities</span><span class="token punctuation">.</span><span class="token function">heldTokenAmountCriteria</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>currency<span class="token punctuation">)</span><span class="token punctuation">,</span> senderAccount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">QueryUtilities</span><span class="token punctuation">.</span><span class="token function">sumTokenCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sum <span class="token operator">=</span> <span class="token function">getServiceHub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVaultService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryBy</span><span class="token punctuation">(</span><span class="token class-name">FungibleToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> queryCriteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">component5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowException</span><span class="token punctuation">(</span>senderAccountName <span class="token operator">+</span> <span class="token string">" has 0 token balance. Please ask the Bank to issue some cash."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Long</span> tokenBalance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tokenBalance <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowException</span><span class="token punctuation">(</span><span class="token string">"Available token balance of "</span> <span class="token operator">+</span> senderAccountName <span class="token operator">+</span> <span class="token string">" is less than the cost of the ticket. Please ask the Bank to issue some cash if you wish to buy the ticket "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SignedTransaction</span> moveTokensTx <span class="token operator">=</span> <span class="token function">subFlow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MoveFungibleTokens</span><span class="token punctuation">(</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>partyAndAmount<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    heldByMint<span class="token punctuation">,</span> mint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Persist token-transaction.</span><span class="token class-name">PersistentTokenTransaction</span> tokenTransaction <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">PersistentTokenTransaction</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">UniqueIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        moveTokensTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"MOVE"</span><span class="token punctuation">,</span>         <span class="token string">"Mint"</span><span class="token punctuation">,</span>         <span class="token string">"HolderA"</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getServiceHub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withEntityManager</span><span class="token punctuation">(</span>entityManager <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>tokenTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UTXO模型&quot;&gt;&lt;a href=&quot;#UTXO模型&quot; class=&quot;headerlink&quot; title=&quot;UTXO模型&quot;&gt;&lt;/a&gt;UTXO模型&lt;/h2&gt;&lt;h2 id=&quot;考虑的问题&quot;&gt;&lt;a href=&quot;#考虑的问题&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="UTXO模型" scheme="https://chl-git.github.io/tags/UTXO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>连接非同一网段的另一台主机上的虚拟机</title>
    <link href="https://chl-git.github.io/posts/d508ea0d/"/>
    <id>https://chl-git.github.io/posts/d508ea0d/</id>
    <published>2021-04-12T10:53:26.000Z</published>
    <updated>2021-06-15T15:00:33.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在远程机器B上安装vmware以及虚拟机C（linux、centos等）。</p><p>说明:</p><ul><li>本地机器称为A（windows10）</li><li>远程机器称为B（windows10）</li><li>远程机器上的虚拟机称为C（centos7）</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h3><p>选择NAT模式，进入虚拟机查看是否可以上网：<code>ping baidu.com</code>；</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/sysconfig/network-scripts/ #网络配置文件路径</span><span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># ls</span>ifcfg-ens33 ifdown-isdn <span class="token function">ifup</span> ifup-plip ifup-tunnelifcfg-lo ifdown-post ifup-aliases ifup-plusb ifup-wireless<span class="token function">ifdown</span> ifdown-ppp ifup-bnep ifup-post init.ipv6-globalifdown-bnep ifdown-routes ifup-eth ifup-ppp network-functionsifdown-eth ifdown-sit ifup-ib ifup-routes network-functions-ipv6ifdown-ib ifdown-Team ifup-ippp ifup-sitifdown-ippp ifdown-TeamPort ifup-ipv6 ifup-Teamifdown-ipv6 ifdown-tunnel ifup-isdn ifup-TeamPort<span class="token comment"># 更改ifcfg-ens33（可能名字会有所不同，但基本是这个）把值改为yes:</span><span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># vi ifcfg-ens33 </span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet <span class="token comment">#网络类型</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp <span class="token comment">#IP获取方式，有dhcp自动获取和静态IP（none/static）</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33 <span class="token comment">#网络名称</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>d1755a41-8026-42f1-871d-9cd78fa2aa3c <span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33 <span class="token comment">#驱动名称</span><span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes <span class="token comment">#设置开机启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后保存退出，重启网络:<code>systemctl restart network.service</code>;再<code>ping baidu.com</code>查看是否成功。</p><h3 id="配置B与C的映射"><a href="#配置B与C的映射" class="headerlink" title="配置B与C的映射"></a>配置B与C的映射</h3><p>打开C，输入<code>ifconfig</code>（可能需要先安装一下<code>yum install net-tools.x86_64</code>），查看ip地址：</p><img src="/posts/d508ea0d/%E6%9F%A5%E7%9C%8Bip.png" class="" title="查看ip"><p>打开主机B的vmware，点击编辑-&gt;虚拟网络编辑器：</p><p><img src="/posts/d508ea0d/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%8401.png" alt="端口映射01"></p><p>在弹出的界面点击更改设置:</p><p><img src="/posts/d508ea0d/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%8402.png" alt="端口映射02"></p><p>选中VMnet8，在下面选择NAT模式并点击设置：</p><p><img src="/posts/d508ea0d/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%8403.png" alt="端口映射03"></p><p>填入一下信息：</p><ul><li>主机端口：随便写一个，但是不能使用本机B已经占用的端口，可以考虑大一点的数字，比如（10101，要记住）；</li><li>类型选择tcp</li><li>虚拟机IP地址：输入上面查到虚拟机c的ip</li><li>虚拟机端口：22（可能有的不一样，可以使用<code>service sshd status</code>查询）</li></ul><p><img src="/posts/d508ea0d/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%8404.png" alt="端口映射04"></p><p>打开B的防火墙配置，点击高级设置：</p><p><img src="/posts/d508ea0d/%E9%98%B2%E7%81%AB%E5%A2%9901.png" alt="防火墙01"></p><p>添加入站规则–&gt;新建规则–&gt;要创建的入站规则（选择<code>端口</code>）–&gt;选择<code>tcp</code>–&gt;选择特定本地端口（选择上面写的10101），然后一直点击下一步，最后输入名称和描述，点击完成即可。</p><h2 id="使用xshell连接"><a href="#使用xshell连接" class="headerlink" title="使用xshell连接"></a>使用xshell连接</h2><p>要注意的是主机和端口是主机B的ip（自己查<code>ipconfig</code>）和端口号（10101）。</p>]]></content>
    
    
    <summary type="html">当需要多台机器的时候，我们可以考虑使用虚拟机，但是我们可能不想在自己的机器上安装太多的虚拟机，购买服务器又不划算，这就可以考虑使用家里的台式机或者其他人的机器。</summary>
    
    
    
    <category term="Linux" scheme="https://chl-git.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://chl-git.github.io/tags/Linux/"/>
    
    <category term="虚拟机" scheme="https://chl-git.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="网络配置" scheme="https://chl-git.github.io/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    <category term="防火墙" scheme="https://chl-git.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Centos7-Fate环境配置</title>
    <link href="https://chl-git.github.io/posts/499c0a40/"/>
    <id>https://chl-git.github.io/posts/499c0a40/</id>
    <published>2021-04-09T11:57:33.000Z</published>
    <updated>2021-06-15T14:17:05.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>OS：Centos7<br>安装时需要注意网络配置</p><p><em><strong>安装时的版本信息请参考<a href="https://github.com/FederatedAI/FATE/blob/master/fate.env">FATE.env</a></strong></em></p><h3 id="Python3-6-5"><a href="#Python3-6-5" class="headerlink" title="Python3.6.5"></a>Python3.6.5</h3><h4 id="安装Python3-6的相关依赖包"><a href="#安装Python3-6的相关依赖包" class="headerlink" title="安装Python3.6的相关依赖包:"></a>安装Python3.6的相关依赖包:</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装wget，gcc"><a href="#安装wget，gcc" class="headerlink" title="安装wget，gcc"></a>安装wget，gcc</h4><p><a href="http://gcc.gnu.org/">gcc</a>是一个编译器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install wget gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装Python3-6-5"><a href="#安装Python3-6-5" class="headerlink" title="安装Python3.6.5"></a>安装Python3.6.5</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载对应版本的压缩包wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.6.5&#x2F;Python-3.6.5.tgz# 解压文件tar -xzvf Python-3.6.5.tgz -C &#x2F;usr&#x2F;local# 进入&#x2F;usr&#x2F;local&#x2F;Python-3.6.5，并编译cd &#x2F;usr&#x2F;local&#x2F;Python-3.6.5.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>./configure</code>生成Makefile，<code>make</code>是编译的意思，就是把源码包编译成二进制可执行文件，<code>make install</code> 就是安装的意思。</p><p>安装完成以后可以删除安装包，即<code>/usr/local/Python-3.6.5</code>文件夹。</p><h4 id="更换系统默认Python版本"><a href="#更换系统默认Python版本" class="headerlink" title="更换系统默认Python版本"></a>更换系统默认Python版本</h4><p>原来的系统默认使用的是python2.7</p><p>看一下<code>/usr/bin</code>路径下的python，命令：<code>ll</code>：</p><ul><li>里面的python可能本身就是一个链接，如果是的话需要先删除：<code>rm -rf python</code>，然后创建新的软链接。</li><li><code>python</code>是一个文件，使用命令：<code>mv python python2(或者python2.7)</code>，再创建软链接。</li></ul><p>创建软链接的命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3.6 &#x2F;usr&#x2F;bin&#x2F;pythonln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建完成后可以输入<code>python -V</code>和<code>pip -V</code>查看是否安装成功。</p><p>查看<code>yum</code>命令是否正常使用（应该是会报错的），<br>一次打开文件下面两个文件，将两个文件第一行代码都改为<code>#!/usr/bin/python2</code>是之前将原来的python改后的路径！！！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# vim &#x2F;usr&#x2F;bin&#x2F;yum#!&#x2F;usr&#x2F;bin&#x2F;pythonimport sys[root@localhost &#x2F;]# vim &#x2F;usr&#x2F;libexec&#x2F;urlgrabber-ext-down#! &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用pip安装virtualenv和virtualenvwrapper"><a href="#使用pip安装virtualenv和virtualenvwrapper" class="headerlink" title="使用pip安装virtualenv和virtualenvwrapper"></a>使用pip安装virtualenv和virtualenvwrapper</h3><p>可以修改<code>pip</code>的安装源，改成国内的源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用命令创建并进入家(不是home)目录下的&#96;.pip&#96;文件夹。mkdir ~&#x2F;.pip &amp;&amp;cd ~&#x2F;.pip# 创建这个文件vim pip.conf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>timeout = 6000index<span class="token punctuation">-</span>url = http<span class="token punctuation">:</span>//pypi.mirrors.ustc.edu.cn/simple/extra<span class="token punctuation">-</span>index<span class="token punctuation">-</span>url = http<span class="token punctuation">:</span>//mirrors.aliyun.com/pypi/simple/                  http<span class="token punctuation">:</span>//pypi.tsinghua.edu.cn/simple/                  http<span class="token punctuation">:</span>//pypi.org<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted<span class="token punctuation">-</span>host = pypi.mirrors.ustc.edu.cn               mirrors.aliyun.com               pypi.tsinghua.edu.cn               pypi.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>windows类似，也是在用户的路径下创建文件夹.pip，在里面创建pip/conf文件，内容同上。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install virtualenv virtualenvwrapper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到如下文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost bin]# find &#x2F; -name virtualenvwrapper.sh&#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;virtualenvwrapper.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加如下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export WORK_NAME&#x3D;~&#x2F;.virtualenvsexport VIRTUALENVWRAPPER_VIRTUALENV&#x3D;&#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;virtualenvsource &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;virtualenvwrapper.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost bin]# source ~&#x2F;.bashrcvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;premkprojectvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;postmkprojectvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;initializevirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;premkvirtualenvvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;postmkvirtualenvvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;prermvirtualenvvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;postrmvirtualenvvirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;predeactivatevirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;postdeactivatevirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;preactivatevirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;postactivatevirtualenvwrapper.user_scripts creating &#x2F;root&#x2F;.virtualenvs&#x2F;get_env_details<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>使用<code>java -version</code>查看本地有关java信息</p><p>使用<code>rpm -qa|grep java</code>命令查看安装包位置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost bin]# rpm -qa|grep javajava-1.8.0-openjdk-1.8.0.282.b08-1.el7_9.x86_64java-1.8.0-openjdk-headless-1.8.0.282.b08-1.el7_9.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除上面两个文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.282.b08-1.el7_9.x86_64rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.282.b08-1.el7_9.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次输入<code>java</code>就会报错。</p><p>下载jdk1.8，最好是本地下载之后上传，保存到<code>/usr/local</code>路径下，并解压</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost local]# tar -zxvf jdk-1.8.tar.gz[root@localhost local]# mv jdk1.8.0_281 jdk8[root@localhost local]# lsbin  etc  games  include  jdk8  jdk-1.8.tar.gz  lib  lib64  libexec  python3  python-3.6.5  sbin  share  src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置环境：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;profile# 在最后添加如下内容export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk8 # 你的路径export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;toos&#x2F;jarexport PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin# 检查[root@localhost jdk8]# java -versionjava version &quot;1.8.0_281&quot;Java(TM) SE Runtime Environment (build 1.8.0_281-b09)Java HotSpot(TM) 64-Bit Server VM (build 25.281-b09, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="直接使用Docker安装"><a href="#直接使用Docker安装" class="headerlink" title="直接使用Docker安装"></a>直接使用Docker安装</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>删除旧版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum remove docker \                docker-client \                docker-client-latest \                docker-common \                docker-latest \                docker-latest-logrotate \                docker-logrotate \                docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置仓库地址<br>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install -y yum-utils \  device-mapper-persistent-data \  lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加阿里云镜像仓库地址：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum-config-manager \    --add-repo \    http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可能会有报错：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# yum-config-manager \&gt;     --add-repo \&gt;     http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo  File &quot;&#x2F;usr&#x2F;bin&#x2F;yum-config-manager&quot;, line 135    except yum.Errors.RepoError, e:# 修改文件&#x2F;usr&#x2F;bin&#x2F;yum-config-manager，将第一行改为python2[root@localhost ~]# vim &#x2F;usr&#x2F;bin&#x2F;yum-config-manager#!&#x2F;usr&#x2F;bin&#x2F;python -tt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用如下命令查看版本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# yum list docker-ce --showduplicates | sort -r[root@localhost ~]# yum list docker-ce-cli --showduplicates | sort -rdocker-ce.x86_64            3:20.10.5-3.el7                     docker-ce-stabledocker-ce.x86_64            3:20.10.4-3.el7                     docker-ce-stabledocker-ce.x86_64            3:20.10.3-3.el7                     docker-ce-stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装对应版本的docker（建议安装18.09）:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# yum -y install  docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io# 使用如下命令查看是否安装成功[root@localhost ~]# docker -vDocker version 18.09.9, build 039a7df9ba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装可视化界面（可选）"><a href="#安装可视化界面（可选）" class="headerlink" title="安装可视化界面（可选）"></a>安装可视化界面（可选）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载图形界面yum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;# 查看默认启动方式systemctl get-default # 是multi-user.target# 修改默认启动systemctl set-default graphical.target  # 将默认模式修改为图形界面模式systemctl set-default multi-user.target # 将默认模式修改为命令行模式# 使用reboot 命令重启查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下载fate镜像"><a href="#下载fate镜像" class="headerlink" title="下载fate镜像"></a>下载fate镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载安装包：mkdir ~&#x2F;FATE &amp;&amp; cd &amp;&amp; ~&#x2F;FATEwget https:&#x2F;&#x2F;webank-ai-1251170195.cos.ap-guangzhou.myqcloud.com&#x2F;docker_standalone_fate_1.6.0.tar.gz# 解压文件tar -xzvf docker_standalone_fate_1.6.0.tar.gz# 执行部署cd docker_standalone_fate_1.6.0bash install_standalone_docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果出现<code>container</code>已经在运行，停止运行再次输入上面的命令即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker ps # 可以查看当前正在运行的容器docker ps -a # 可以查看所有容器，包括没有运行的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果出现端口号8080被占用：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 输入以下命令查看占用端口号的进程[root@localhost docker_fate]# fuser -v -n tcp 8080                     用户     进程号 权限   命令8080&#x2F;tcp:            root       7463 F.... java# 使用kill命令结束进程kill 7463<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入docker环境CONTAINER_ID&#x3D;&#96;docker ps -aqf &quot;name&#x3D;fate&quot;&#96;docker exec -t -i $&#123;CONTAINER_ID&#125; bash# 测试bash .&#x2F;python&#x2F;federatedml&#x2F;test&#x2F;run_test.sh# 出现下方语句表示成功：there are 0 failed test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装fate-client"><a href="#安装fate-client" class="headerlink" title="安装fate-client"></a>安装fate-client</h3><p>virtualwrapper命令：</p><ul><li>mkvirtualenv  [virtualname]　　　　 创建新的虚拟环境, 并进入</li><li>lsvirtualenv　　　　　　　　　　  列出所有的虚拟环境</li><li>workon  [virtualname]　　　　　　  进入或切换虚拟环境</li><li>cdvirtualenv　　　　　　　　　　 进入当前的虚拟环境的目录</li><li>deactivate　　　　　　　　　　    退出虚拟环境</li></ul><p>创建虚拟环境并安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkvirtual fatepip install fate-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;手动安装&quot;&gt;&lt;a href=&quot;#手动安装&quot; class=&quot;headerlink&quot; title=&quot;手动安装&quot;&gt;&lt;/a&gt;手动安装&lt;/h2&gt;&lt;p&gt;OS：Centos7&lt;br&gt;安装时需要注意网络配置&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;安装时的版本信息请参考&lt;a hre</summary>
      
    
    
    
    <category term="联邦学习" scheme="https://chl-git.github.io/categories/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://chl-git.github.io/tags/Linux/"/>
    
    <category term="Centos7" scheme="https://chl-git.github.io/tags/Centos7/"/>
    
    <category term="FATE" scheme="https://chl-git.github.io/tags/FATE/"/>
    
    <category term="联邦学习" scheme="https://chl-git.github.io/tags/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="环境配置" scheme="https://chl-git.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Corda-API-Flows</title>
    <link href="https://chl-git.github.io/posts/aa15b6d6/"/>
    <id>https://chl-git.github.io/posts/aa15b6d6/</id>
    <published>2021-04-08T02:52:15.000Z</published>
    <updated>2021-06-15T14:17:22.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flows"><a href="#Flows" class="headerlink" title="Flows"></a>Flows</h2><h3 id="一个流程示例"><a href="#一个流程示例" class="headerlink" title="一个流程示例"></a>一个流程示例</h3><p>包括两个方面：</p><ul><li>Initiator：发起方</li><li>Responder：响应方</li></ul><blockquote><p>发起方包含如下流程：</p></blockquote><p>Part1——建立交易</p><ul><li>选择公证人</li><li>创建交易生成器（transaction builder）</li><li>从库中提出所有的输入状态，并添加到生成器中</li><li>创建所有输出并添加到生成器中</li><li>添加commands，attachments和time-window</li></ul><p>Part2——签名</p><ul><li>对交易生成器签名</li><li>将生成器转换为签名过的交易（signed transtraction）</li></ul><p>Part3——验证交易</p><ul><li>通过合同（contracts）验证交易</li></ul><p>Part4——收集交易对手的签名</p><ul><li>将交易</li></ul><h3 id="关闭会话API"><a href="#关闭会话API" class="headerlink" title="关闭会话API"></a>关闭会话API</h3><ul><li>在<code>FLowsession</code>中有<code>clolse()</code></li><li>在<code>FlowLogic</code>中有<code>closw(sessions:NonEmpty&lt;FlowSession&gt;)</code></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> session <span class="token operator">=</span> <span class="token function">initiateFlow</span><span class="token punctuation">(</span>party<span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">val</span> session <span class="token operator">=</span> <span class="token function">initiateFlow</span><span class="token punctuation">(</span>party<span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>不要在<code>finally</code>语句块中使用<code>close()</code>，有如下两个原因:</strong></em></p><ul><li>没有必要。上面如果报错，流就会终止，状态机会释放资源和内存等，不需要再调用<code>close()</code>。</li><li>出现我们不期望的结果。例如：我们本应该收到错误信息，但是由于在<code>finally</code>中添加了<code>close()</code>，我们可能得到的是关闭flow的相关信息，而没有得到期望的错误信息。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flows&quot;&gt;&lt;a href=&quot;#Flows&quot; class=&quot;headerlink&quot; title=&quot;Flows&quot;&gt;&lt;/a&gt;Flows&lt;/h2&gt;&lt;h3 id=&quot;一个流程示例&quot;&gt;&lt;a href=&quot;#一个流程示例&quot; class=&quot;headerlink&quot; title=&quot;一</summary>
      
    
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="Corda-API" scheme="https://chl-git.github.io/tags/Corda-API/"/>
    
    <category term="Flow" scheme="https://chl-git.github.io/tags/Flow/"/>
    
  </entry>
  
  <entry>
    <title>Corda（4）——单元测试</title>
    <link href="https://chl-git.github.io/posts/b07c1e78/"/>
    <id>https://chl-git.github.io/posts/b07c1e78/</id>
    <published>2021-04-05T09:17:35.000Z</published>
    <updated>2021-06-15T14:17:47.954Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://training.corda.net/prepare-and-discover/discover-tests/">查看链接</a></p><h2 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h2><p>在当前测试类中，使用<code>@Before</code>注解的方法会在后面的每一个测试<code>Test</code>前运行，这将简化很多重复代码的编写。</p><p>在每一个测试之前都需要先搭建网络(<code>setup()</code>)，正如示例代码所示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    network <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockNetwork</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockNetworkParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withCordappsForAllNodes</span><span class="token punctuation">(</span><span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>            <span class="token class-name">TestCordapp</span><span class="token punctuation">.</span><span class="token function">findCordapp</span><span class="token punctuation">(</span><span class="token string">"com.example.contract"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">TestCordapp</span><span class="token punctuation">.</span><span class="token function">findCordapp</span><span class="token punctuation">(</span><span class="token string">"com.example.flow"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> network<span class="token punctuation">.</span><span class="token function">createPartyNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> network<span class="token punctuation">.</span><span class="token function">createPartyNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// For real nodes this happens automatically, but we have to manually register the flow for tests.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StartedMockNode</span> node <span class="token operator">:</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span><span class="token function">registerInitiatedFlow</span><span class="token punctuation">(</span><span class="token class-name">ExampleFlow<span class="token punctuation">.</span>Acceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    network<span class="token punctuation">.</span><span class="token function">runNetwork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h2><p>在当前测试类中，使用<code>@After</code>注解的方法会在后面的每一个测试<code>Test</code>后运行，比如测试完成后需要停止节点，关闭网络(<code>tearDown()</code>)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@After</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    network<span class="token punctuation">.</span><span class="token function">stopNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h2><p><code>@Rule</code>注解是方法级别的，每个测试方法执行时都会执行被@Rule注解的成员变量的方法（类似于@Before）。</p><p>这相当于给每个测试方法定义一个规则，比如示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Rule</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ExpectedException</span> exception <span class="token operator">=</span> <span class="token class-name">ExpectedException</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以这么理解：</p><p>rule为：如果抛出异常，则抛出异常为<code>ExpectedException.none()</code></p><p>这规则是可以自定义的，可以参考<a href="https://segmentfault.com/a/1190000023877021">这个链接</a></p><p><code>@Before</code>注解的方法只能作用于当前测试类及其子类，而实现了<code>TestRule</code>的类可以被用于多个测试类</p><p><code>@ClassRule</code>注解是类级别的，测试类执行时仅会执行一次被@ClassRule注解的静态变量的方法（类似于@BeforeClass）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://training.corda.net/prepare-and-discover/discover-tests/&quot;&gt;查看链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Before&quot;&gt;&lt;a href=&quot;#Before&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="单元测试" scheme="https://chl-git.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    <category term="注解" scheme="https://chl-git.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Corda（3）——节点数据库配置以及访问</title>
    <link href="https://chl-git.github.io/posts/f6070d29/"/>
    <id>https://chl-git.github.io/posts/f6070d29/</id>
    <published>2021-04-05T01:07:57.000Z</published>
    <updated>2021-06-15T14:30:14.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载H2"><a href="#下载H2" class="headerlink" title="下载H2"></a>下载H2</h2><p><a href="http://www.h2database.com/html/download.html">H2下载</a></p><h2 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h2><p>在每个节点的shell中输入<code>bye</code>关闭所有节点。</p><p>到<code>workflows-java/build.gradle</code>文件夹中修改配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nodeDefaults <span class="token punctuation">&#123;</span>        cordapp project("<span class="token punctuation">:</span>contracts<span class="token punctuation">-</span>java")        // 添加一下代码        extraConfig = <span class="token punctuation">[</span>            <span class="token key atrule">h2Settings</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                // A random port will be selected.                <span class="token key atrule">address</span> <span class="token punctuation">:</span> <span class="token string">'localhost:0'</span>            <span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新部署并运行节点</p><p>在每个shell里面会多出类似下面一行代码：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Database connection url is              <span class="token builtin class-name">:</span> jdbc:h2:tcp://localhost:61433/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动h2，在页面添加<code>JDBC URL</code>，其他的不用更改(每个节点进行同样的操作)</p><p><strong>可以选择语言</strong></p><p><img src="/posts/f6070d29/h2%E8%BF%9E%E6%8E%A5.png" alt="h2连接"></p><h2 id="创建IOU"><a href="#创建IOU" class="headerlink" title="创建IOU"></a>创建IOU</h2><p>在PartyA输入一下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flow start Initiator iouValue: <span class="token number">50</span>,otherParty:<span class="token string">"O=PartyB,L=New York,C=US"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然可以在<code>PartyB</code>先进行监听（上面已经提到<code>vaultTrack</code>）</p><p>在<code>PartyA</code>和<code>PartyB</code>的web控制台上找到并点击VAULT_STATES,然后点击运行，会显示一条记录，在其他的节点查询不到相关信息。</p><p>在<code>PartyA</code>和<code>PartyB</code>会多一个<code>IOU_STATES</code>，查询得到如下的信息：</p><p><img src="/posts/f6070d29/iouStates.png" alt="iouStates"></p><p>列名在<code>IOUState</code>的<a href="https://github.com/corda/samples-java/blob/a61e2cc9910d7d5de83122bf7d36fd071796a7c3/Basic/cordapp-example/contracts-java/src/main/java/com/example/state/IOUState.java#L56-L59">schema</a>中定义。</p><p>我们知道，一个’state’的唯一性由产生它的<code>transaction</code>和作为输出的列表中的<code>index</code>表示，这个特性在<a href="https://github.com/corda/corda/blob/67e3e09a4edb41d17b8adfa669d671c690c5db33/core/src/main/kotlin/net/corda/core/contracts/Structures.kt#L154-L163"><code>StateRdf class</code></a>中定义</p><p>在h2web控制台中<code>PartyA</code>和<code>PartyB</code>的<code>IOU_STATES</code>可以看到(<code>VAULT_STATES</code>也可以看到)：<br><img src="/posts/f6070d29/unique.png" alt="unique"></p><h2 id="checkpoints"><a href="#checkpoints" class="headerlink" title="checkpoints"></a>checkpoints</h2><p>关闭<code>PartyC</code>和<code>Notary</code>，在<code>PartyA</code>中创建和 <code>PartyC</code>的IOU，</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Mon Apr 05 <span class="token number">15</span>:37:24 CST <span class="token number">202</span><span class="token operator"><span class="token file-descriptor important">1</span>>></span><span class="token operator">></span> flow start Initiator iouValue: <span class="token number">5</span>,otherParty: <span class="token string">"O=PartyC,L=Paris,C=FR"</span>StartingGenerating transaction based on new IOU.Verifying contract constraints.Signing transaction with our private key.Gathering the counterparty's signature.Collecting signatures from counterparties.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会停在<code>colecting signatures from counterparties</code>这里，可以在h2web控制台中查看<code>PartyA</code>的信息，可以看到<code>IOU_STATE</code>没有增加记录，但是在<code>NODE_CHECKPOINTS</code>中有一条记录如下：<br><img src="/posts/f6070d29/checkpoints_PartyA.png" alt="NODE_CHECKPOINTS"></p><p>重新运行PartyC：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">// 必须先进入workflows-java/build/nodes/PartyC<span class="token builtin class-name">cd</span> workflows-java/build/nodes/PartyCjava -jar corda.jar//下面这个命令是不行的，提示找不到<span class="token variable"><span class="token variable">`</span>node.conf<span class="token variable">`</span></span>//java -jar workflows-java/build/nodes/PartyC/corda.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="more-details"><a href="#more-details" class="headerlink" title="more details"></a>more details</h2><p><code>Notary</code>提供交易的唯一性标识，并且避免双花，但是我们上面的创建IOU的过程是不涉及到<code>state</code>的消耗的，所以就算在<code>workflows-java/build.gradle</code>中将<code>Notary</code>的<code>validating</code>,改为<code>true</code>，当不启动<code>Natory</code>时，也会完成上面的流程，或者说上面的<code>transactions</code>是没有输入的，是不需要<code>Notary</code>参与的。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">node <span class="token punctuation">&#123;</span>    name "O=Notary<span class="token punctuation">,</span>L=London<span class="token punctuation">,</span>C=GB"    notary = <span class="token punctuation">[</span><span class="token key atrule">validating</span> <span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">]</span> //这里改为true    p2pPort 10000    rpcSettings <span class="token punctuation">&#123;</span>        address("localhost<span class="token punctuation">:</span>10001")        adminAddress("localhost<span class="token punctuation">:</span>10002")    <span class="token punctuation">&#125;</span>    projectCordapp <span class="token punctuation">&#123;</span>        deploy = false    <span class="token punctuation">&#125;</span>    cordapps.clear()<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jar-注入"><a href="#jar-注入" class="headerlink" title=".jar 注入"></a>.jar 注入</h2><p>在每一个节点的文件夹中都有数据cordapps，这是完整整个<code>flow</code>必须的.jar。</p>]]></content>
    
    
    <summary type="html">对Corda网络中节点的数据库进行配置</summary>
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="H2数据库" scheme="https://chl-git.github.io/tags/H2%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Corda（2）——示例</title>
    <link href="https://chl-git.github.io/posts/63bb09b4/"/>
    <id>https://chl-git.github.io/posts/63bb09b4/</id>
    <published>2021-04-03T13:29:56.000Z</published>
    <updated>2021-06-15T14:28:48.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行Corda的示例"><a href="#运行Corda的示例" class="headerlink" title="运行Corda的示例"></a>运行Corda的示例</h2><h3 id="下载源码-java版"><a href="#下载源码-java版" class="headerlink" title="下载源码(java版)"></a>下载源码(java版)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>your workspace<span class="token punctuation">]</span><span class="token function">git</span> clone https://github.com/corda/samples-java.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="在IDE中打开samples-java-Basic-cordapp-examples"><a href="#在IDE中打开samples-java-Basic-cordapp-examples" class="headerlink" title="在IDE中打开samples-java/Basic/cordapp-examples"></a>在IDE中打开samples-java/Basic/cordapp-examples</h3><p>目录结构如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">├── LICENCE├── README.md├── TRADEMARK├── build.gradle├── clients│   ├── build.gradle│   └── src│       └── main│           ├── java│           │   └── net│           │       └── corda│           │           └── samples│           │               └── example│           │                   ├── Client.java│           │                   └── webserver│           │                       ├── Controller.java│           │                       ├── NodeRPCConnection.java│           │                       └── Starter.java│           └── resources│               └── static│                   ├── app.js│                   └── index.html├── config│   ├── dev│   │   └── log4j2.xml│   └── test│       └── log4j2.xml├── contracts│   ├── build.gradle│   └── src│       ├── main│       │   └── java│       │       └── net│       │           └── corda│       │               └── samples│       │                   └── example│       │                       ├── contracts│       │                       │   └── IOUContract.java│       │                       ├── schema│       │                       │   ├── IOUSchema.java│       │                       │   └── IOUSchemaV1.java│       │                       └── states│       │                           └── IOUState.java│       └── test│           └── java│               └── net│                   └── corda│                       └── samples│                           └── example│                               └── contracts│                                   ├── ContractTests.java│                                   └── StateTests.java├── gradle│   └── wrapper│       ├── gradle<span class="token punctuation">-</span>wrapper.jar│       └── gradle<span class="token punctuation">-</span>wrapper.properties├── gradle.properties├── gradlew├── gradlew.bat├── repositories.gradle├── settings.gradle└── workflows    ├── build.gradle    └── src        ├── integrationTest        │   └── java        │       └── net        │           └── corda        │               └── samples        │                   └── example        │                       └── DriverBasedTest.java        ├── main        │   ├── java        │   │   └── net        │   │       └── corda        │   │           └── samples        │   │               └── example        │   │                   └── flows        │   │                       └── ExampleFlow.java        │   └── resources        │       └── migration        │           ├── iou.changelog<span class="token punctuation">-</span>master.xml        │           └── iou.changelog<span class="token punctuation">-</span>v1.xml        └── test            └── java                └── net                    └── corda                        └── samples                            └── example                                └── FlowTests.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>clients文件夹包含的是用于Spring Boot集成的源码</li><li>config是配置文件，包含log4j2</li><li>contracts和workflows是CorDapp的源码</li><li>gradle是包含Gradle Wrapper</li></ul><h3 id="部署节点并运行示例CorDapp"><a href="#部署节点并运行示例CorDapp" class="headerlink" title="部署节点并运行示例CorDapp"></a>部署节点并运行示例CorDapp</h3><p>打开终端输入一下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gradlew.bat deployNodes// tips可以只部署java<span class="token punctuation">(</span>或者kotlin<span class="token punctuation">)</span>// -b表示 --build-filegradlew.bat -b workflows-java/build.gradle deploynodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会在根目录下创建文件夹build/nodes，里面会有三个Node文件夹（PartyA,PartyB,Notary），节点信息在根目录下的build.gradle中定义。</p><p>输入如下命令运行示例CorDapp</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">call build<span class="token punctuation">\</span>nodes<span class="token punctuation">\</span>runnodes.bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会打开三个如下的界面，当出现如下图红色方框所示的”welocme”语句时表示成功运行<br><img src="/posts/63bb09b4/Notary.png" alt="Notary"></p><h2 id="三种交互方式"><a href="#三种交互方式" class="headerlink" title="三种交互方式"></a>三种交互方式</h2><ul><li><a href="#%E9%80%9A%E8%BF%87http">通过http</a></li><li><a href="#%E9%80%9A%E8%BF%87%E4%BA%A4%E4%BA%92%E5%BC%8Fshell">通过交互式shell</a></li><li><a href="#%E9%80%9A%E8%BF%87h2%E7%9A%84web%E6%8E%A7%E5%88%B6%E5%8F%B0">通过h2的web控制台</a></li></ul><h3 id="通过http"><a href="#通过http" class="headerlink" title="通过http"></a>通过http</h3><p><u><em><strong>这一部分的内容还要进一步研究</strong></em></u></p><!-- 三个几点的定义如下：* PartyA: localhost:50005* PartyB: localhost:50006* Notary: localhost:50007 --><h3 id="通过交互式shell"><a href="#通过交互式shell" class="headerlink" title="通过交互式shell"></a>通过交互式shell</h3><p>可以直接在每个节点的shell与节点进行交互，比如在节点A和B之间创建一个IOU（i owe you）账单，在PartyA中输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span>flow start Initiator iouValue: <span class="token number">50</span>, otherParty: <span class="token string">"O=PartyB,L=New York,C=US"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令中<code>Initiator</code>是一个流（extends FlowLogic），<code>iouValue</code>和<code>otherParty</code>是Initiator中的两个参数。</p><p>生产环境中使用Network Map Service来定义节点名字和查找节点，并使用Doorman Service管理准入</p><p>得到类似如下结果：</p><p><img src="/posts/63bb09b4/%E4%BA%A4%E4%BA%92%E5%BC%8Fshell%E5%88%9B%E5%BB%BAIOU.png" alt="命令行交互创建IOU"></p><p>上图中出现如下信息，表示交易完成</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Flow completed with result: SignedTransaction<span class="token punctuation">(</span>id<span class="token operator">=</span>AEE179389C8F701C940489BF208D13C09B6E8D48F6AC32979C7F0C2B0BD1B526<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以使用如下命令进行查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run vaultQuery contractStateType: com.example.state.IOUState<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>PartyA</code>和<code>PartyB</code>可以查看类似如下信息，但是<code>Notary</code>是没有的，如果有其他节点也是看不到的，这正是Corda的<code>Need-to-know</code>特性。</p><p><img src="/posts/63bb09b4/%E4%BA%A4%E4%BA%92%E5%BC%8Fshell%E6%9F%A5%E7%9C%8BIOU%E4%BF%A1%E6%81%AF.png" alt="查看"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">contractStateClassName: <span class="token string">"com.example.state.IOUState"</span>recordedTime: <span class="token string">"2021-04-05T00:05:24.579Z"</span>consumedTime: nullstatus: <span class="token string">"UNCONSUMED"</span>notary: <span class="token string">"O=Notary, L=London, C=GB"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到是<code>UNCONSUMED</code>,<code>com.example.state.IOUState</code>是IOUState的package名。</p><p>可以输入以下命令实时查看</p><p>在PartyB中输入以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">run vaultTrack contractStateType com.example.state.IOUState<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当其他节点与B进行交易时，交易信息会在PartyB实时显示。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">..</span>.<span class="token comment"># 省略</span>totalStatesAvailable: -1stateTypes: <span class="token string">"UNCONSUMED"</span>otherResults: <span class="token punctuation">[</span><span class="token punctuation">]</span>Updates:Waiting <span class="token keyword">for</span> completion or Ctrl-C <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过h2的web控制台"><a href="#通过h2的web控制台" class="headerlink" title="通过h2的web控制台"></a><a href="../Corda%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E8%8A%82%E7%82%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AE/">通过h2的web控制台</a></h3>]]></content>
    
    
    <summary type="html">运行官方的例子</summary>
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
  </entry>
  
  <entry>
    <title>Git初识</title>
    <link href="https://chl-git.github.io/posts/89f97af8/"/>
    <id>https://chl-git.github.io/posts/89f97af8/</id>
    <published>2021-03-29T13:01:17.000Z</published>
    <updated>2021-06-15T14:18:11.281Z</updated>
    
    <content type="html"><![CDATA[<p><strong>拉取代码：</strong><br>git pull</p><p><strong>推本地代码上去：</strong><br>1、git status<br>2、git add [filename1] [filename2]<br>3、git commit [filename1] -m “提交信息说明”<br>4、git push</p><p><strong>回退</strong><br>1、退回至缓存区的coding回退<br>git reset [filename1]<br>2、会退到制定版本<br>git reset –hard 版本号（版本号为commit后的）</p><p><strong>看提交日志：</strong><br>git log<br>git log –oneline</p><p><strong>分支</strong><br>1、查看分支<br>git branch<br>2、创建分支<br>git branch 分支名<br>3、切花分支<br>git checkout 分支名<br>git checkout -b 分支名（创建并切换分支）<br>4、合并某分支到当前分支<br>git merge 分支名<br>5、删除分支<br>git branch -d 分支名（强行删除 -D）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;拉取代码：&lt;/strong&gt;&lt;br&gt;git pull&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推本地代码上去：&lt;/strong&gt;&lt;br&gt;1、git status&lt;br&gt;2、git add [filename1] [filename2]&lt;br&gt;3、git commit </summary>
      
    
    
    
    <category term="Git" scheme="https://chl-git.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://chl-git.github.io/tags/Git/"/>
    
    <category term="branch" scheme="https://chl-git.github.io/tags/branch/"/>
    
  </entry>
  
  <entry>
    <title>Tokens SDK</title>
    <link href="https://chl-git.github.io/posts/b3ff0665/"/>
    <id>https://chl-git.github.io/posts/b3ff0665/</id>
    <published>2021-03-24T12:22:02.000Z</published>
    <updated>2021-06-15T14:19:04.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>广义来说，token有如下两个定义：</p><ul><li><p>存托凭证（A depository receipt）：这意味着它是对存在于账本之外的东西的分类账本表示；</p></li><li><p>本机令牌（A native token）：一个本机令牌，表示该值实际上存在于分类帐中，并且无法将其用于账本之外的东西，因为该东西甚至不存在于分类账之外。</p></li></ul><p>令牌可以是<code>ContractState</code>，<code>LinearState</code>，<code>OwnableState</code>或<code>FungibleAsset</code>之一或组合，带有以下3个命令：Issue，Move和Redeem。</p><p>可以根据如下设计流（design flow）为tokens构建框架：</p><p><img src="/posts/b3ff0665/%E8%AE%BE%E8%AE%A1%E6%B5%81.png" alt="Design Flow"></p><h3 id="TokenType"><a href="#TokenType" class="headerlink" title="TokenType"></a>TokenType</h3><p><code>TokenType</code> 是固定单位，您发出该单位的标记。它只需要一个标识符（tokenidentifier），例如 RMB，以及小数位数字的个数(fractionDigits)，这些小数位数本质上定义了令牌的最小面值。(如[RMB token-type，0.01]表示人民币的最小面额为分)。</p><p>根据上面的Design Flow，TokenType在设计之后使用的整个生命周期是不可变的，但是在设计的时候可以根据需要扩展，添加除前面已经提到的标识符和小数位数之外的其他属性，但是一旦定义在流通及回收的过程中就是不可以变的。</p><h3 id="EvovableTokenType"><a href="#EvovableTokenType" class="headerlink" title="EvovableTokenType"></a>EvovableTokenType</h3><p>与<code>TokenType</code> 实例不同，<code>EvolvableTokenType</code> 实例是一个 <code>LinearState</code> 实例，该实例将随着时间的推移根据相应的规则而演变。此外，还提供了部分流（<code>flows</code>）促进这种转变。</p><p>可以考虑一辆车，车的品牌、型号、车的标识码是不变的，但是里程数，价格是会随着时间的推移改变的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;广义来说，token有如下两个定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存托凭证（A depository receipt）：这意味着它是对存</summary>
      
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="SDK" scheme="https://chl-git.github.io/tags/SDK/"/>
    
    <category term="token" scheme="https://chl-git.github.io/tags/token/"/>
    
    <category term="fungible" scheme="https://chl-git.github.io/tags/fungible/"/>
    
    <category term="non-fungible" scheme="https://chl-git.github.io/tags/non-fungible/"/>
    
  </entry>
  
  <entry>
    <title>Corda（1）——基础</title>
    <link href="https://chl-git.github.io/posts/8984fc95/"/>
    <id>https://chl-git.github.io/posts/8984fc95/</id>
    <published>2021-03-24T05:29:37.000Z</published>
    <updated>2021-06-15T14:17:26.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区块链基础知识"><a href="#区块链基础知识" class="headerlink" title="区块链基础知识"></a>区块链基础知识</h2><p>中本聪在2008年10月发表了一片论文，其中指出了数字货币中“双花”问题的解决方案。“比特币”开始收到人们的关注，并且区块链技术被越来越多的人认可，在很多领域找到了适用场景。</p><p>在这之前，“双花”是通过可信的第三方机构（最典型的就是银行）对账本进行保管，达到解决问题的目的；而在区块链上，每个参与方都有分类账的副本，如果需要更改记录，需要网络中的节点达成共识，这就可以解决“双花”问题</p><h2 id="Corda"><a href="#Corda" class="headerlink" title="Corda"></a>Corda</h2>]]></content>
    
    
    <summary type="html">学习Corda前需要掌握的基础知识</summary>
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="密码学" scheme="https://chl-git.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="DLT" scheme="https://chl-git.github.io/tags/DLT/"/>
    
    <category term="共识" scheme="https://chl-git.github.io/tags/%E5%85%B1%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Vim编辑器</title>
    <link href="https://chl-git.github.io/posts/73bed3ab/"/>
    <id>https://chl-git.github.io/posts/73bed3ab/</id>
    <published>2021-03-17T14:32:03.000Z</published>
    <updated>2021-06-15T14:19:08.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VIM编辑器"><a href="#VIM编辑器" class="headerlink" title="VIM编辑器"></a>VIM编辑器</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><span id="more"></span><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><h3 id="三种使用模式"><a href="#三种使用模式" class="headerlink" title="三种使用模式"></a>三种使用模式</h3><p>基本上 vi/vim 共分为三种模式，分别是<a href="#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F"><strong>命令模式（Command mode）</strong></a>，<a href="#%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F"><strong>输入模式（Insert mode）</strong></a>和<a href="#%E5%BA%95%E7%BA%BF%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F"><strong>底线命令模式（Last line mode）</strong></a>。这三种模式的作用分别是：</p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a><strong>命令模式</strong></h4><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a><strong>输入模式</strong></h4><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a><strong>底线命令模式</strong></h4><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以可以进行任何的编辑。</p><p><strong>按下 ESC 按钮回到一般模式</strong></p><p>按下 <strong>Esc</strong> 这个按钮，输入 <strong>:wq</strong> 储存后离开 vim！</p><p>OK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。</p><blockquote><p>Vim 按键说明</p></blockquote><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong>：</p><table><thead><tr><th align="left">移动光标的方法</th><th>命令的含义</th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">Ctrl + d</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">数字&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td align="left">n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th align="left">搜索替换</th><th></th></tr></thead><tbody><tr><td align="left">/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><table><thead><tr><th align="left">删除、复制与粘贴</th><th></th></tr></thead><tbody><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong>：</p><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong>：</p><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;VIM编辑器&quot;&gt;&lt;a href=&quot;#VIM编辑器&quot; class=&quot;headerlink&quot; title=&quot;VIM编辑器&quot;&gt;&lt;/a&gt;VIM编辑器&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://chl-git.github.io/categories/Linux/"/>
    
    
    <category term="vim" scheme="https://chl-git.github.io/tags/vim/"/>
    
    <category term="linux" scheme="https://chl-git.github.io/tags/linux/"/>
    
    <category term="编辑器" scheme="https://chl-git.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用基本命令</title>
    <link href="https://chl-git.github.io/posts/56783b8/"/>
    <id>https://chl-git.github.io/posts/56783b8/</id>
    <published>2021-03-17T14:25:24.000Z</published>
    <updated>2021-06-15T14:18:53.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="走近linux"><a href="#走近linux" class="headerlink" title="走近linux"></a>走近linux</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><!--more--><p>关机指令为：shutdown ；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span> <span class="token comment"># 将数据由内存同步到硬盘中。</span><span class="token function">shutdown</span> <span class="token comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><span class="token function">shutdown</span> –h <span class="token number">10</span> <span class="token comment"># 这个命令告诉大家，计算机将在10分钟后关机</span><span class="token function">shutdown</span> –h now <span class="token comment"># 立马关机</span><span class="token function">shutdown</span> –h <span class="token number">20</span>:25 <span class="token comment"># 系统会在今天20:25关机</span><span class="token function">shutdown</span> –h +10 <span class="token comment"># 十分钟后关机</span><span class="token function">shutdown</span> –r now <span class="token comment"># 系统立马重启</span><span class="token function">shutdown</span> –r +10 <span class="token comment"># 系统十分钟后重启</span><span class="token function">reboot</span> <span class="token comment"># 就是重启，等同于 shutdown –r now</span><span class="token function">halt</span> <span class="token comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span><span class="token comment"># 最后总结一下，不管是重启系统还是关闭系统，首先要运行 **sync** 命令，把内存中的数据写到磁盘中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>系统目录结构</p></blockquote><p>树状目录结构：（Linux的一切资源都挂载在这个 <code>&quot;/&quot;</code> 根节点下）</p><p>登录系统后，在当前命令窗口下输入命令<code>ls</code>，打开如下的目录文件：</p><p><img src="/posts/56783b8/%E4%B8%BB%E7%9B%AE%E5%BD%95.png" alt="主目录"></p><p><strong>以下是对部分目录的解释：</strong></p><ul><li><strong>/bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li><li><strong>/boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。(不要动)</li><li><strong>/dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li><strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li><strong>/lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。</li><li><strong>/media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li><li><strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li><strong>/root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li><li><strong>/sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li><li><strong>/sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</li><li><strong>/usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li><strong>/usr/bin：</strong> 系统用户使用的应用程序。</li><li><strong>/usr/sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。</li><li><strong>/usr/src：</strong> 内核源代码默认的放置目录。</li><li><strong>/var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li></ul><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p>绝对路径和相对路径</p></blockquote><p>最顶级的目录为根目录 **/**。</p><p><strong>绝对路径：</strong> 由根目录 / 写起，例如：/usr/share/doc 这个目录。</p><p><strong>相对路径：</strong> 不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><ul><li><p>ls: 列出目录</p></li><li><p>cd：切换目录</p></li><li><p>pwd：显示目前的目录</p></li><li><p>mkdir：创建一个新的目录</p></li><li><p>rmdir：删除一个空的目录</p></li><li><p>cp: 复制文件或目录</p></li><li><p>rm: 移除文件或目录</p></li><li><p>mv: 移动文件与目录，或修改文件与目录的名称</p><p>  <strong>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</strong></p></li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>在Linux系统当中， ls 命令可能是最常被运行的。<br>语法：<code>ls [-al][目录名称]</code></p><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># ls -al ~  # ~ 表示用户目录。如果是root，就回到/root,如果是某个user1，就回到/home/user1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：<code>cd [相对路径或绝对路径]</code></p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 mkdir 命令创建 test 目录</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mkdir test</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># ls</span>chl  <span class="token builtin class-name">test</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cd test</span><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token comment"># 回到上一级</span><span class="token comment"># cd ..</span><span class="token comment"># 回到根目录</span><span class="token comment"># cd /</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p><strong>Print Working Directory</strong> 的缩写， 显示目前所在的目录</p><p>语法：<code>pwd [-P]</code><br>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 单纯显示出目前的工作目录</span><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># pwd</span>/home/test<span class="token comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># cd /bin</span><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># pwd -P</span>/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>make directory,创建新目录,可以创建<strong>多级</strong>，<strong>多个</strong></p><p>语法：<br><code>mkdir [-mp] 目录名称 [目录名称[ 目录名称]]</code></p><p>选项与参数：</p><ul><li>-m ：配置文件的权限！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入我们用户目录下</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># cd /home</span><span class="token comment"># 创建多层级目录</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mkdir test/test2/test3</span>mkdir: 无法创建目录<span class="token string">"test/test2/test3"</span><span class="token builtin class-name">:</span> 没有那个文件或目录<span class="token comment"># 加了这个 -p 的选项，可以创建多层目录！</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mkdir -p test/test2/test3</span><span class="token comment"># 创建权限为 rwx--x--x 的目录。</span><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># mkdir -m 711 test1</span><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls</span>test1  test2<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls -l</span>总用量 <span class="token number">0</span>drwx--x--x. <span class="token number">2</span> root root  <span class="token number">6</span> <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">20</span>:25 test1drwxr-xr-x. <span class="token number">3</span> root root <span class="token number">19</span> <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">20</span>:23 test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p> <strong>删除空的目录</strong> ，删除目录的时候需要把里面的内容先删掉！！！</p><p>语法：<code>rmdir [-p] 目录名称</code></p><p>选项与参数：**-p ：** 连同上一级『空的』目录也一起删除</p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 因为尚有内容，所以无法删除！</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># rmdir test</span>rmdir: 删除 <span class="token string">"test"</span> 失败: 目录非空<span class="token comment"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># rmdir -p test</span>rmdir: 删除 <span class="token string">"test"</span> 失败: 目录非空<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># rmdir -p test/test1/test2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 <a href="#rm">rm</a> 命令来删除非空目录！</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>复制文件或目录,<strong>经过测试好像不能复制到多个目标路径</strong></p><p>语法：</p><p>cp [-adfilprsu] 来源档(source) 目标档(destination)</p><p>cp [options] source1 source2 source3 …. directory</p><p>选项与参数：</p><ul><li><strong>-a：</strong> 相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-p：</strong> 连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-d：</strong> 若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-r：</strong> 递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-f：</strong> 为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong> 若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong> 进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li><strong>-s：</strong> 复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong> 若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在home下创建两个文件夹test1,test2,test3</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mkdir test1 test2 test3</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># ls</span>test1  test2  test3<span class="token comment"># 在test1里创建f1文件</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cd test1</span><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># vim f1</span><span class="token comment"># 复制 test1目录下的f1 到 test2,test3目录下</span><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># cd /home</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cp test1/f1 test2 test3</span>cp: 略过目录<span class="token string">"test2"</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cd test3</span><span class="token punctuation">[</span>root@localhost test2<span class="token punctuation">]</span><span class="token comment"># ls</span>f1<span class="token comment"># 再次复制，加上-i参数，增加覆盖询问？</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cp -i test1/f1 test3</span>cp：是否覆盖<span class="token string">"test3/f1"</span>？ y<span class="token comment"># n不覆盖，y为覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>移除文件或目录</p><p>语法：rm [-fir] 文件或目录</p><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将刚刚在 cp 的实例中创建的 f1删除掉！</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># rm -i test3/f1</span>rm：是否删除普通文件 <span class="token string">"test3/f1"</span>？<span class="token comment"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span><span class="token function">rm</span> -rf / <span class="token comment"># 命令解释：强制递归删除根目录`/`下所有文件！！！ </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>移动文件与目录，或修改名称</p><p>语法：</p><p>mv [-fiu] source destination</p><p>mv [options] source1 source2 source3 …. directory</p><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将test3下f1文件移动到test2下</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mv test3/f1 test2</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cd test3</span><span class="token punctuation">[</span>root@localhost test3<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cd test2</span><span class="token punctuation">[</span>root@localhost test2<span class="token punctuation">]</span><span class="token comment"># ls</span>f1<span class="token comment">#可以使用*表示所有文件，将test2下所有文件移动到test3</span><span class="token punctuation">[</span>root@localhost test2<span class="token punctuation">]</span><span class="token comment"># ls</span>f1  f2<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mv test2/* test3</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cd test2</span><span class="token punctuation">[</span>root@localhost test2<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token punctuation">[</span>root@localhost test2<span class="token punctuation">]</span><span class="token comment"># cd ../test3</span><span class="token punctuation">[</span>root@localhost test3<span class="token punctuation">]</span><span class="token comment"># ls</span>f1  f2<span class="token comment"># 若目标文件夹不存在，就相当于重命名！</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># ls</span>test1  test2  test3<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># mv test3 test4</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># ls</span>test1  test2  test4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p><img src="/posts/56783b8/%E5%B1%9E%E4%B8%BB%EF%BC%8C%E5%B1%9E%E7%BB%84.png" alt="属组，属组"></p><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中<strong>第一个字符</strong>代表这个文件是目录、文件或链接文件等等：</p><p>​<strong>前三个比较常用</strong></p><ul><li><u><strong>当为[ <strong>d</strong> ]则是目录</strong></u></li><li><u><strong>当为[ <strong>-</strong> ]则是文件；</strong></u></li><li><u><strong>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</strong></u></li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定，例如：</p><table><thead><tr><th align="center">文件类型</th><th align="center">属主</th><th align="center">属组</th><th align="center">其他用户</th></tr></thead><tbody><tr><td align="center">d</td><td align="center">rwx</td><td align="center">r-x</td><td align="center">r-x</td></tr></tbody></table><p>其中：</p><p>第1、4、7位用字符”r”，表示有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><blockquote><p>修改文件属性</p></blockquote><p><strong>1、chgrp：更改文件属组:</strong></p><p>语法：</p><p>chgrp [-R] 属组名 文件名</p><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><p><strong>2、chown：更改文件属主，也可以同时更改文件属组:</strong></p><p>语法：</p><p>chown [–R] 属主名 文件名</p><p>chown [-R] 属主名：属组名 文件名</p><p><strong>3、chmod：更改文件9个属性（必须掌握）:</strong></p><p>语法：</p><p>chmod [-R] xyz 文件或目录</p><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">r:4     w:2      x:1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># chmod 777 [filename] 所有用户可读可写可执行（rwxrwxrwx）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><p>可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote><p>由第一行开始显示文件内容</p></blockquote><p>语法：</p><p>cat [-AbEnTv]</p><p>选项与参数：</p><ul><li>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 <code>$</code> 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><p><em><strong>可以同时查看多个文件</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># cat test1/f1 test4/f1</span>begin endbegin end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tac test1/f1</span>endbegin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><blockquote><p>显示行号</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nl</span>  <span class="token punctuation">[</span>-bnw<span class="token punctuation">]</span>  文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># nl -n ln test1/f1</span><span class="token number">1</span>      begin              <span class="token number">2</span>      end<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># nl -n rn test1/f1</span>     <span class="token number">1</span> begin                  <span class="token number">2</span> end<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># nl -n rz test1/f1</span>000001 begin              000002 end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter：代表向下翻『一行』；</li><li>/字串：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f：立刻显示出档名以及目前显示的行数；</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># more /etc/csh.login</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>--More--<span class="token punctuation">(</span><span class="token number">61</span>%<span class="token punctuation">)</span> <span class="token comment"># 重点在这一行喔！你的光标也会在这里等待你的命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻『字串』的功能；</li><li>?字串 ：向上搜寻『字串』的功能；</li><li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q ：离开 less 这个程序；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># more /etc/csh.login</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>中间省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token builtin class-name">:</span>   <span class="token comment"># 这里可以等待你输入命令！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> <span class="token punctuation">[</span>-n number<span class="token punctuation">]</span> 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># head -n 20 /etc/csh.login</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token punctuation">[</span>-n number<span class="token punctuation">]</span> 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -n 20 /etc/csh.login</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>ifconfig 可以查看网络情况：</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装ifconfig命令：</span>yum search <span class="token function">ifconfig</span>yum <span class="token function">install</span> net-tools.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">最近在开始接触Linux，这里是一些常用基本命令的总结</summary>
    
    
    
    <category term="Linux" scheme="https://chl-git.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://chl-git.github.io/tags/linux/"/>
    
    <category term="命令" scheme="https://chl-git.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Corda-API--Contarcts</title>
    <link href="https://chl-git.github.io/posts/153d6957/"/>
    <id>https://chl-git.github.io/posts/153d6957/</id>
    <published>2021-03-13T14:59:33.567Z</published>
    <updated>2021-06-15T14:17:17.436Z</updated>
    
    <content type="html"><![CDATA[<p>对于Corda，需要熟悉的API的使用才能在处理业务逻辑的时候利用好平台的接口编写正确的代码。</p><h2 id="Contracts"><a href="#Contracts" class="headerlink" title="Contracts"></a>Contracts</h2><p>contracts都是implement于接口<code>contracts</code>，这个接口只有一个<code>verify</code>方法，输入是一个<a href="#LedgerTransaction"><code>LedgerTransaction</code></a>的实例。</p><span id="more"></span><h3 id="使用kotlin语言定义如下"><a href="#使用kotlin语言定义如下" class="headerlink" title="使用kotlin语言定义如下"></a>使用kotlin语言定义如下</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * Implemented by a program that implements business logic on the shared ledger. All participants run this code for * every [net.corda.core.transactions.LedgerTransaction] they see on the network, for every input and output state. All * contracts must accept the transaction for it to be accepted: failure of any aborts the entire thing. The time is taken * from a trusted time-window attached to the transaction itself i.e. it is NOT necessarily the current time. * * TODO: Contract serialization is likely to change, so the annotation is likely temporary. */</span><span class="token annotation builtin">@KeepForDJVM</span><span class="token annotation builtin">@CordaSerializable</span><span class="token keyword">interface</span> Contract <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Takes an object that represents a state transition, and ensures the inputs/outputs/commands make sense.     * Must throw an exception if there's a problem that should prevent state transition. Takes a single object     * rather than an argument so that additional data can be added without breaking binary compatibility with     * existing contract code.     */</span>    <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IllegalArgumentException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">verify</span><span class="token punctuation">(</span>tx<span class="token operator">:</span> LedgerTransaction<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>verify</code>方法通过以下三步判断交易是否合法：</p><ul><li><p>收集每一个交易的输入和输出<code>states</code></p></li><li><p>将交易<code>tx</code>作为输入传入<code>verify</code>函数</p></li><li><p>只有全部通过才能在数据中进行</p></li></ul><p><strong><code>verify</code>函数在沙盒执行，在验证交易<code>tx</code>的合法性时只能访问定义在<code>LedgerTransaction</code>里面的属性。</strong></p><p>在每一个constract中必须重写<code>verify</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">LeadgerTransaction</span> tx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 1.什么都不写表示全部通过</span>    <span class="token comment">// Always accepts！</span>    <span class="token comment">// 2.只写下面表示全部拒绝</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">'Always rejects!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LedgerTransaction"><a href="#LedgerTransaction" class="headerlink" title="LedgerTransaction"></a>LedgerTransaction</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于Corda，需要熟悉的API的使用才能在处理业务逻辑的时候利用好平台的接口编写正确的代码。&lt;/p&gt;
&lt;h2 id=&quot;Contracts&quot;&gt;&lt;a href=&quot;#Contracts&quot; class=&quot;headerlink&quot; title=&quot;Contracts&quot;&gt;&lt;/a&gt;Contracts&lt;/h2&gt;&lt;p&gt;contracts都是implement于接口&lt;code&gt;contracts&lt;/code&gt;，这个接口只有一个&lt;code&gt;verify&lt;/code&gt;方法，输入是一个&lt;a href=&quot;#LedgerTransaction&quot;&gt;&lt;code&gt;LedgerTransaction&lt;/code&gt;&lt;/a&gt;的实例。&lt;/p&gt;</summary>
    
    
    
    <category term="Corda" scheme="https://chl-git.github.io/categories/Corda/"/>
    
    
    <category term="Corda" scheme="https://chl-git.github.io/tags/Corda/"/>
    
    <category term="区块链" scheme="https://chl-git.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Corda-API" scheme="https://chl-git.github.io/tags/Corda-API/"/>
    
    <category term="Contract" scheme="https://chl-git.github.io/tags/Contract/"/>
    
  </entry>
  
  <entry>
    <title>Linux-learning</title>
    <link href="https://chl-git.github.io/posts/41805539/"/>
    <id>https://chl-git.github.io/posts/41805539/</id>
    <published>2021-03-13T13:24:55.000Z</published>
    <updated>2021-06-15T14:18:49.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-链接概念"><a href="#Linux-链接概念" class="headerlink" title="Linux 链接概念"></a>Linux 链接概念</h2><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>可以使用<strong>ln</strong> 命令产生硬链接。</p><span id="more"></span><p><strong>硬连接:</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接:</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd /home</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># touch f1 # 创建一个测试文件f1</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>f1<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ln f1 f2     # 创建f1的一个硬连接文件f2</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ln -s f1 f3   # 创建f1的一个符号连接文件f3</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -li       # -i参数显示文件的inode节点信息</span><span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f1<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f2<span class="token number">397248</span> lrwxrwxrwx <span class="token number">1</span> root root     <span class="token number">2</span> Mar <span class="token number">13</span> 00:50 f3 -<span class="token operator">></span> f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># echo 字符串输出 >> f1 输出到 f1文件</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># echo "I am f1 file" >>f1</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f1</span>I am f1 <span class="token function">file</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f2</span>I am f1 <span class="token function">file</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f3</span>I am f1 <span class="token function">file</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rm -f f1</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f2</span>I am f1 <span class="token function">file</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f3</span>cat: f3: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f3 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3，对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><blockquote><p>简介</p></blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><blockquote><p>用户账号的管理</p></blockquote><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录bash等资源。</p><blockquote><p>添加账号 useradd</p></blockquote><pre class="line-numbers language-none"><code class="language-none">useradd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li><p>选项 :</p><ul><li><ul><li>-c comment 指定一段注释性描述。<ul><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-m　使用者目录如不存在则自动建立。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li></ul></li></ul></li><li><p>用户名 :</p><ul><li><ul><li>指定新账号的登录名。</li></ul></li></ul></li></ul><p>测试：</p><pre class="line-numbers language-none"><code class="language-none"># 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 &#x2F;home&#x2F;kuangshen[root@kuangshen home]# useradd -m kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p><blockquote><p>Linux下如何切换用户</p></blockquote><p>1.切换用户的命令为：su username 【username是你的用户名哦】</p><p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p><p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实<strong>ctrl+d</strong>也是执行的exit命令</p><p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><blockquote><p>删除帐号</p></blockquote><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><pre class="line-numbers language-none"><code class="language-none">userdel 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><pre class="line-numbers language-none"><code class="language-none">[root@kuangshen home]# userdel -r kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><blockquote><p>修改帐号</p></blockquote><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><pre class="line-numbers language-none"><code class="language-none">usermod 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none"># usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z –g developer kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p><blockquote><p>用户口令的管理</p></blockquote><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：</p><pre class="line-numbers language-none"><code class="language-none">passwd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令：</p><pre class="line-numbers language-none"><code class="language-none">$ passwd Old password:******New password:*******Re-enter new password:*******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><pre class="line-numbers language-none"><code class="language-none"># passwd kuangshenNew password:*******Re-enter new password:*******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p><p>为用户指定空口令时，执行下列形式的命令：</p><pre class="line-numbers language-none"><code class="language-none"># passwd -d kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><pre class="line-numbers language-none"><code class="language-none"># passwd -l kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><blockquote><p>增加一个新的用户组使用groupadd命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">groupadd 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><p>实例1：</p><pre class="line-numbers language-none"><code class="language-none"># groupadd group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><p>实例2：</p><pre class="line-numbers language-none"><code class="language-none"># groupadd -g 101 group2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><blockquote><p>如果要删除一个已有的用户组，使用groupdel命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">groupdel 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none"># groupdel group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令从系统中删除组group1。</p><blockquote><p>修改用户组的属性使用groupmod命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">groupmod 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><pre class="line-numbers language-none"><code class="language-none"># 此命令将组group2的组标识号修改为102。groupmod -g 102 group2# 将组group2的标识号改为10000，组名修改为group3。groupmod –g 10000 -n group3 group2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>切换组</p></blockquote><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><pre class="line-numbers language-none"><code class="language-none">newgrp root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p><blockquote><p>/etc/passwd</p></blockquote><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><pre class="line-numbers language-none"><code class="language-none">＃ cat &#x2F;etc&#x2F;passwdroot:x:0:0:Superuser:&#x2F;:daemon:x:1:1:System daemons:&#x2F;etc:bin:x:2:2:Owner of system commands:&#x2F;bin:sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:lp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><pre class="line-numbers language-none"><code class="language-none">用户名:口令（密码）:用户标识号:组标识号:注释性描述:主目录:登录Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1）”用户名”是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着/etc/group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><pre class="line-numbers language-none"><code class="language-none">伪 用 户 含 义bin 拥有可执行的用户命令文件sys 拥有系统文件adm 拥有帐户文件uucp UUCP使用lp lp或lpd子系统使用nobody NFS使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>/etc/shadow</p></blockquote><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p><p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p><pre class="line-numbers language-none"><code class="language-none">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</li><li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li><li>“最大时间间隔”指的是口令保持有效的最大天数。</li><li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><blockquote><p>/etc/group</p></blockquote><p>用户组的所有信息都存放在/etc/group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><pre class="line-numbers language-none"><code class="language-none">组名:口令:组标识号:组内用户列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</p></li><li><p>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</p></li><li><p>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</p></li><li><p>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p></li></ol><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><blockquote><p>概述</p></blockquote><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><blockquote><p>df</p></blockquote><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">df [-ahikHTm] [目录或文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将系统内所有的文件系统列出来！</span><span class="token comment"># 在 Linux 底下如果 df 没有加任何选项</span><span class="token comment"># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</span><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df</span>Filesystem     1K-blocks   Used Available Use% Mounted ondevtmpfs          <span class="token number">889100</span>       <span class="token number">0</span>    <span class="token number">889100</span>   <span class="token number">0</span>% /devtmpfs             <span class="token number">899460</span>     <span class="token number">704</span>    <span class="token number">898756</span>   <span class="token number">1</span>% /dev/shmtmpfs             <span class="token number">899460</span>     <span class="token number">496</span>    <span class="token number">898964</span>   <span class="token number">1</span>% /runtmpfs             <span class="token number">899460</span>       <span class="token number">0</span>    <span class="token number">899460</span>   <span class="token number">0</span>% /sys/fs/cgroup/dev/vda1       <span class="token number">41152812</span> <span class="token number">6586736</span>  <span class="token number">32662368</span>  <span class="token number">17</span>% /tmpfs             <span class="token number">179896</span>       <span class="token number">0</span>    <span class="token number">179896</span>   <span class="token number">0</span>% /run/user/0<span class="token comment"># 将容量结果以易读的容量格式显示出来</span><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -h</span>Filesystem     Size Used Avail Use% Mounted ondevtmpfs       869M     <span class="token number">0</span> 869M   <span class="token number">0</span>% /devtmpfs           879M 708K 878M   <span class="token number">1</span>% /dev/shmtmpfs           879M 496K 878M   <span class="token number">1</span>% /runtmpfs           879M     <span class="token number">0</span> 879M   <span class="token number">0</span>% /sys/fs/cgroup/dev/vda1       40G  <span class="token number">6</span>.3G   32G  <span class="token number">17</span>% /tmpfs           176M     <span class="token number">0</span> 176M   <span class="token number">0</span>% /run/user/0<span class="token comment"># 将系统内的所有特殊文件格式及名称都列出来</span><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -aT</span>Filesystem     Type       1K-blocks   Used Available Use% Mounted onsysfs         sysfs               <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sysproc           proc                <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /procdevtmpfs       devtmpfs       <span class="token number">889100</span>       <span class="token number">0</span>    <span class="token number">889100</span>   <span class="token number">0</span>% /devsecurityfs     securityfs          <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/kernel/securitytmpfs         tmpfs          <span class="token number">899460</span>     <span class="token number">708</span>    <span class="token number">898752</span>   <span class="token number">1</span>% /dev/shmdevpts         devpts              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /dev/ptstmpfs         tmpfs          <span class="token number">899460</span>     <span class="token number">496</span>    <span class="token number">898964</span>   <span class="token number">1</span>% /runtmpfs         tmpfs          <span class="token number">899460</span>       <span class="token number">0</span>    <span class="token number">899460</span>   <span class="token number">0</span>% /sys/fs/cgroupcgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/systemdpstore         pstore              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/pstorecgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/freezercgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/cpusetcgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/hugetlbcgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/blkiocgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/net_cls,net_priocgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/memorycgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/pidscgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/cpu,cpuacctcgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/devicescgroup         cgroup              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/fs/cgroup/perf_eventconfigfs       configfs            <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/kernel/config/dev/vda1     ext4         <span class="token number">41152812</span> <span class="token number">6586748</span>  <span class="token number">32662356</span>  <span class="token number">17</span>% /systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_miscmqueue         mqueue              <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /dev/mqueuedebugfs       debugfs             <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys/kernel/debughugetlbfs     hugetlbfs           <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /dev/hugepagestmpfs         tmpfs          <span class="token number">179896</span>       <span class="token number">0</span>    <span class="token number">179896</span>   <span class="token number">0</span>% /run/user/0binfmt_misc   binfmt_misc         <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /proc/sys/fs/binfmt_misc<span class="token comment"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -h /etc</span>Filesystem     Size Used Avail Use% Mounted on/dev/vda1       40G  <span class="token number">6</span>.3G   32G  <span class="token number">17</span>% /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>du</p></blockquote><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">du [-ahskm] 文件或目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span><span class="token comment"># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du</span><span class="token number">16</span>./redis<span class="token number">8</span>./www/.oracle_jre_usage  <span class="token comment"># 包括隐藏文件的目录</span><span class="token number">24</span>./www<span class="token number">48</span>.                        <span class="token comment"># 这个目录(.)所占用的总量</span><span class="token comment"># 将文件的容量也列出来</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du -a</span><span class="token number">4</span>./redis/.bash_profile<span class="token number">4</span>./redis/.bash_logout    <span class="token punctuation">..</span><span class="token punctuation">..</span>中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">4</span>./kuangstudy.txt <span class="token comment"># 有文件的列表了</span><span class="token number">48</span>.<span class="token comment"># 检查根目录底下每个目录所占用的容量</span><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du -sm /*</span><span class="token number">0</span>/bin<span class="token number">146</span>/boot<span class="token punctuation">..</span><span class="token punctuation">..</span>.中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">0</span>/proc<span class="token punctuation">..</span><span class="token punctuation">..</span>.中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">1</span>/tmp<span class="token number">3026</span>/usr  <span class="token comment"># 系统初期最大就是他了啦！</span><span class="token number">513</span>/var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><blockquote><p>磁盘挂载与卸除</p></blockquote><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> <span class="token punctuation">[</span>-t 文件系统<span class="token punctuation">]</span> <span class="token punctuation">[</span>-L Label名<span class="token punctuation">]</span> <span class="token punctuation">[</span>-o 额外选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> 装置文件名 挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># mkdir /mnt/hdc6</span><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/hdc6 /mnt/hdc6</span><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># df</span>Filesystem           1K-blocks     Used Available Use% Mounted on/dev/hdc6              <span class="token number">1976312</span>     <span class="token number">42072</span>   <span class="token number">1833836</span>   <span class="token number">3</span>% /mnt/hdc6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>磁盘卸载命令 umount 语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> <span class="token punctuation">[</span>-fn<span class="token punctuation">]</span> 装置文件名或挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>linux中一切皆文件</p><blockquote><p>命令</p></blockquote><p>ps ：查看当前系统中正在执行的各种进程的信息！</p><p>ps -xx：</p><ul><li>-a 显示当前终端运行的所有进程的信息</li><li>-u 以用户的信息显示进程</li><li>-x 显示后台运行进程的参数！</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -aux   <span class="token comment"># 查看所有进程信息</span><span class="token comment"># |  在Linux中叫做管道符 </span><span class="token comment"># grep  查找文件中符合条件的字符串</span><span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> mysql<span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ps -ef :可以查看父进程的信息：ps -ef</strong></p><p><strong>进程树：pstree</strong></p><ul><li>-p 显示父ID</li><li>-u 显示用户组</li></ul> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pstree -pu <span class="token comment"># 若命令不存在使用yum install psmisc 命令安装插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结束进程：一般不使用，特殊情况：如Java程序进入死循环等等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token punctuation">[</span>ID号<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>三种方式：</p><ul><li><p>rpm</p></li><li><p>解压缩</p></li><li><p>yum在线安装</p></li></ul><h2 id="jdk安装（rpm安装）"><a href="#jdk安装（rpm安装）" class="headerlink" title="jdk安装（rpm安装）"></a>jdk安装（rpm安装）</h2><p>1、rpm下载地址<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>2、如果有安装openjdk 则卸载</p><pre class="line-numbers language-none"><code class="language-none">[root@kuangshen ~]# java -versionjava version &quot;1.8.0_121&quot;Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)# 检查[root@kuangshen ~]# rpm -qa|grep jdkjdk1.8.0_121-1.8.0_121-fcs.x86_64# 卸载 -e --nodeps 强制删除[root@kuangshen ~]# rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64[root@kuangshen ~]# java -version-bash: &#x2F;usr&#x2F;bin&#x2F;java: No such file or directory  # OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、安装JDK</p><pre class="line-numbers language-none"><code class="language-none"># 安装java rpm[root@kuangshen kuangshen]# rpm -ivh jdk-8u221-linux-x64.rpm# 安装完成后配置环境变量 文件：&#x2F;etc&#x2F;profileJAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_221-amd64CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib:%JAVA_HOME%&#x2F;jre&#x2F;libPATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;binexport PATH CLASSPATH JAVA_HOME# 保存退出# 让新增的环境变量生效！source &#x2F;etc&#x2F;profile# 测试 java -version[root@kuangshen java]# java -versionjava version &quot;1.8.0_221&quot;Java(TM) SE Runtime Environment (build 1.8.0_221-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tomcat安装（解压缩安装）"><a href="#Tomcat安装（解压缩安装）" class="headerlink" title="Tomcat安装（解压缩安装）"></a>Tomcat安装（解压缩安装）</h2><p>1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！</p><p>2、将文件移动到/usr/tomcat/下，并解压！</p><pre class="line-numbers language-none"><code class="language-none">[root@kuangshen kuangshen]# mv apache-tomcat-9.0.22.tar.gz &#x2F;usr[root@kuangshen kuangshen]# cd &#x2F;usr[root@kuangshen usr]# lsapache-tomcat-9.0.22.tar.gz[root@kuangshen usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的</p><pre class="line-numbers language-none"><code class="language-none"># 执行：startup.sh --&gt;启动tomcat# 执行：shutdown.sh --&gt;关闭tomcat.&#x2F;startup.sh.&#x2F;shutdown.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！</p><pre class="line-numbers language-none"><code class="language-none"># 查看firewall服务状态systemctl status firewalld# 开启、重启、关闭、firewalld.service服务# 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all    # 查看全部信息firewall-cmd --list-ports  # 只看端口信息# 开启端口开端口命令：firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent重启防火墙：systemctl restart firewalld.service命令含义：--zone #作用域--add-port&#x3D;80&#x2F;tcp  #添加端口，格式为：端口&#x2F;通讯协议--permanent   #永久生效，没有此参数重启后失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Docker（yum安装）"><a href="#安装Docker（yum安装）" class="headerlink" title="安装Docker（yum安装）"></a>安装Docker（yum安装）</h2><blockquote><p>基于 CentOS 7 安装</p></blockquote><ol><li><p>官网安装参考手册：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></li><li><p>确定你是CentOS7及以上版本</p> <pre class="line-numbers language-none"><code class="language-none">[root@192 Desktop]# cat &#x2F;etc&#x2F;redhat-releaseCentOS Linux release 7.2.1511 (Core)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>yum安装gcc相关（需要确保 虚拟机可以上外网 ）</p> <pre class="line-numbers language-none"><code class="language-none">yum -y install gccyum -y install gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>卸载旧版本</p> <pre class="line-numbers language-none"><code class="language-none">yum -y remove docker docker-common docker-selinux docker-engine# 官网版本yum remove docker \          docker-client \          docker-client-latest \          docker-common \          docker-latest \          docker-latest-logrotate \          docker-logrotate \          docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装需要的软件包</p> <pre class="line-numbers language-none"><code class="language-none">yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置stable镜像仓库</p> <pre class="line-numbers language-none"><code class="language-none"># 错误yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo## 报错[Errno 14] curl#35 - TCP connection reset by peer[Errno 12] curl#35 - Timeout# 正确推荐使用国内的yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新yum软件包索引</p> <pre class="line-numbers language-none"><code class="language-none">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装Docker CE</p> <pre class="line-numbers language-none"><code class="language-none">yum -y install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动docker</p> <pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-none"><code class="language-none">docker versiondocker run hello-worlddocker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="VMware使用"><a href="#VMware使用" class="headerlink" title="VMware使用"></a>VMware使用</h1><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>类似存档</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>linux必须配置到本机的对应网段；</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Linux-链接概念&quot;&gt;&lt;a href=&quot;#Linux-链接概念&quot; class=&quot;headerlink&quot; title=&quot;Linux 链接概念&quot;&gt;&lt;/a&gt;Linux 链接概念&lt;/h2&gt;&lt;p&gt;Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。&lt;/p&gt;
&lt;p&gt;可以使用&lt;strong&gt;ln&lt;/strong&gt; 命令产生硬链接。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://chl-git.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://chl-git.github.io/tags/Linux/"/>
    
    <category term="软链接" scheme="https://chl-git.github.io/tags/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
    <category term="硬链接" scheme="https://chl-git.github.io/tags/%E7%A1%AC%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
</feed>
